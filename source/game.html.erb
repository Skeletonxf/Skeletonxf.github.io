<%= partial :back %>
<h1 class = "center">
  A game eventually
</h1>
<div id = "flex-wrapper">
  <div id = "armies">
    <div id = "armies-all">
      <h2>Available</h2>
      <ol id = "territory-armies-all"></ol>
    </div>
    <div id = "armies-selected">
      <h2>Selected</h2>
      <ol id = "territory-armies-selected"></ol>
    </div>
    <div id = "armies-attack"></div>
    <div id = "attacks">
      <h2>Orders</h2>
      <ol id = "territory-attacks"></ol>
    </div>
  </div>
  <div id = "map">
    <div id = "territories">
      <% mid = "$" %>
      <% inner = 1 %>
      <% middle = 1 %>
      <% outer = 1 %>
      <% base = 1 %>
      <% water = 1 %>
      <% 6.times do |n| %>
        <div id = "section<%= n*2 %>" class="section">
          <div class="container">
            <ol class="even nothing-up face-to-face-down">
              <li class='hex base' id='base<%= base %>'>
                <div class="content info">
                  <p class='id'><%= base %></p>
                  <% base += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="odd face-to-face-up point-to-point-down">
              <li class='hex' id='outer<%= outer %>'>
                <div class="content info">
                  <p class='id'><%= outer %></p>
                  <% outer += 1 %>
                </div>
                <div class="content units"></div>
              </li>
              <li class='hex' id='outer<%= outer %>'>
                <div class="content info">
                  <p class='id'><%= outer %></p>
                  <% outer += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="odd point-to-point-up face-to-face-down">
              <li class='hex' id='middle<%= middle %>'>
                <div class="content info">
                  <p class='id'><%= middle %></p>
                  <% middle += 1 %>
                </div>
                <div class="content units"></div>
              </li>
              <li class='hex' id='middle<%= middle %>'>
                <div class="content info">
                  <p class='id'><%= middle %></p>
                  <% middle += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="even face-to-face-up point-to-point-down">
              <li class='hex inner' id='inner<%= inner %>'>
                <div class="content info">
                  <p class='id'><%= inner %></p>
                  <% inner += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="even point-to-point-up nothing-down">
              <li class='hex blank'></li>
            </ol>
          </div>
        </div>
        <div id = "section<%= (n*2)+1 %>" class="section">
          <div class="container">
            <ol class="odd nothing-up point-to-point-down">
              <li class='hex water', id='water<%= water %>'>
                <div class="content info">
                  <p class='id'><%= water %></p>
                  <% water += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="odd point-to-point-up point-to-point-down">
              <li class='hex blank half'></li>
            </ol>
            <ol class="odd point-to-point-up point-to-point-down">
              <li class='hex' id='middle<%= middle %>'>
                <div class="content info">
                  <p class='id'><%= middle %></p>
                  <% middle += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="odd point-to-point-up point-to-point-down">
              <li class='hex inner' id='inner<%= inner %>'>
                <div class="content info">
                  <p class='id'><%= inner %></p>
                  <% inner += 1 %>
                </div>
                <div class="content units"></div>
              </li>
            </ol>
            <ol class="odd point-to-point-up nothing-down">
              <li class='hex blank half'></li>
            </ol>
          </div>
        </div>
      <% end %>
      <div id="section12" class="center section">
        <div class="container">
          <ol class="center odd nothing-up nothing-down">
            <li class="center hex" id='<%= mid %>'>
              <div class="content info">
                <p class='id mid'><%= mid %></p>
              </div>
              <div class="content units"></div>
            </li>
          </ol>
        </div>
      </div>
    </div>
    <svg id="paths"></svg>
    <svg id="walls"></svg>
    <svg id="mines"></svg>
    <svg id="castles"></svg>
  </div>
  <div id = "info">
    <h2 id = "territory-name"></h2>
    <h3>Control</h3>
    <p id = "territory-controller"></p>
    <h3>Structures</h3>
    <p id = "territory-mines"></p>
    <p id = "territory-wall"></p>
    <p id = "territory-castle"></p>
    <h3>Gold Income</h3>
    <p id = "territory-gold-income"></p>
    <div id="info-build-units">
      <h3>Buy Units</h3>
      <h4>20 Gold</h4>
      <div class="buy">
        <label for="archers">Archers</label>
        <input type="number" id="archers"></input>
      </div>
      <div class="buy">
        <label for="calvary">Calvary</label>
        <input type="number" id="calvary"></input>
      </div>
      <div class="buy">
        <label for="infantry">Infantry</label>
        <input type="number" id="infantry"></input>
      </div>
      <h4>1500 Gold</h4>
      <div class="buy">
        <label for="rams">Battering Ram</label>
        <input type="number" id="rams"></input>
      </div>
    </div>
    <div id="info-buttons">
      <h4>Territory Upgrades</h4>
      <button>Build Mine (200)</button>
      <button>Build Wall (1500)</button>
      <button>Build Castle (2000)</button>
      <button>Raze Down</button>
    </div>
  </div>
  <div id = "players">
    <ul>
      <li>
        <h2>Player 1</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <div class="player-info">
          <p>Archers Level 2</p>
          <button>Upgrade</button>
        </div>
        <div class="player-info">
          <p>Calvary Level 1</p>
          <button>Upgrade</button>
        </div>
        <div class="player-info">
          <p>Infantry Level 3</p>
          <button>Upgrade</button>
        </div>
        <button>End Turn</button>
      </li>
      <li>
        <h2>Player 2</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <p>Archers Level 2</p>
        <p>Calvary Level 1</p>
        <p>Infantry Level 3</p>
      </li>
      <li>
        <h2>Player 3</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <p>Archers Level 2</p>
        <p>Calvary Level 1</p>
        <p>Infantry Level 3</p>
      </li>
      <li>
        <h2>Player 4</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <p>Archers Level 2</p>
        <p>Calvary Level 1</p>
        <p>Infantry Level 3</p>
      </li>
      <li>
        <h2>Player 5</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <p>Archers Level 2</p>
        <p>Calvary Level 1</p>
        <p>Infantry Level 3</p>
      </li>
      <li>
        <h2>Player 6</h2>
        <h3>Resources</h3>
        <p>Gold: 500</p>
        <p>Archers Level 2</p>
        <p>Calvary Level 1</p>
        <p>Infantry Level 3</p>
      </li>
    </ul>
  </div>
</div>

<script>
let game = document.getElementById('map')

let drawLine = null;
let drawWall = null;
let drawMine = null;
{
  let paths = document.getElementById('paths')
  let walls = document.getElementById('walls')
  let mines = document.getElementById('mines')
  let castles = document.getElementById('castles')

  let svgNS = "http://www.w3.org/2000/svg"
  let createLine = function(values) {
    let line = document.createElementNS(svgNS, 'line')
    line.setAttributeNS(null, 'stroke-width', 12)
    for (let property in values) {
      line.setAttributeNS(null, property, values[property]);
    }
    paths.appendChild(line)
  }
  let createCircle = function(values, parent) {
    let circle = document.createElementNS(svgNS, 'circle')
    for (let property in values) {
      circle.setAttributeNS(null, property, values[property]);
    }
    parent.appendChild(circle)
  }


  function bounds(element) {
    return element.getBoundingClientRect()
  }

  drawLine = function(element1, element2) {
    let color = 'darkgreen'
    if (element1.id.includes('water') || element2.id.includes('water')) {
      color = 'skyblue'
    }
    createLine({
      x1: (bounds(element1).x + (bounds(element1).width/2)) - bounds(paths).x,
      y1: (bounds(element1).y + (bounds(element1).height/2)) - bounds(paths).y,
      x2: (bounds(element2).x + (bounds(element2).width/2)) - bounds(paths).x,
      y2: (bounds(element2).y + (bounds(element2).height/2)) - bounds(paths).y,
      stroke: color
    })
  }

  drawWall = function(element) {
    let radius = 35
    if (element.id === '$') {
      radius = 80
    }
    createCircle({
      cx: (bounds(element).x + (bounds(element).width/2)) - bounds(paths).x,
      cy: (bounds(element).y + (bounds(element).height/2)) - bounds(paths).y,
      fill: 'grey',
      r: radius
    }, walls)
  }

  drawMine = function(element, level) {
    let cx = (bounds(element).x + (bounds(element).width/2)) - bounds(paths).x
    let cy = (bounds(element).y + (bounds(element).height/2)) - bounds(paths).y
    let radius = 28
    let increment = -Math.PI/6
    if (element.id === '$') {
      radius = 70
      increment = -Math.PI/12
    }
    // draw mines around the perimeter
    for (let i = 0; i < level; i++) {
      let angle = 2.3*(Math.PI/3) + (i*increment)
      createCircle({
        cx: cx + (Math.sin(angle)*radius),
        cy: cy + (Math.cos(angle)*radius),
        fill: 'gold',
        r: 5
      }, mines)
    }
  }

  drawCastle = function(element) {
    let cx = (bounds(element).x + (bounds(element).width/2)) - bounds(paths).x
    let cy = (bounds(element).y + (bounds(element).height/2)) - bounds(paths).y
    let radius = 24
    if (element.id === '$') {
      radius = 50
    }
    let angle = -Math.PI/3
    createCircle({
      cx: cx + (Math.sin(angle)*radius),
      cy: cy + (Math.cos(angle)*radius),
      fill: 'black',
      r: element.id === '$' ? 12 : 6
    }, castles)
  }
}

let graph = {
  '$': ['inner2', 'inner4', 'inner6', 'inner8', 'inner10', 'inner12'],
  inner1: ['inner2', 'inner12', 'middle1', 'middle2'],
  inner2: ['$', 'inner1', 'inner3', 'middle3'],
  inner3: ['inner2', 'inner4', 'middle4', 'middle5'],
  inner4: ['$', 'inner3', 'inner5', 'middle6'],
  inner5: ['inner4', 'inner6', 'middle7', 'middle8'],
  inner6: ['$', 'inner5', 'inner7', 'middle9'],
  inner7: ['inner6', 'inner8', 'middle10', 'middle11'],
  inner8: ['$', 'inner7', 'inner9', 'middle12'],
  inner9: ['inner8', 'inner10', 'middle13', 'middle14'],
  inner10: ['$', 'inner9', 'inner11', 'middle15'],
  inner11: ['inner10', 'inner12', 'middle16', 'middle17'],
  inner12: ['$', 'inner1', 'inner11', 'middle18'],
  middle1: ['inner1', 'middle18', 'middle2', 'outer1', 'outer2', 'water6'],
  middle2: ['inner1', 'middle1', 'middle3', 'outer1', 'outer2', 'water1'],
  middle3: ['inner2', 'middle2', 'middle4', 'water1'],
  middle4: ['inner3', 'middle3', 'middle5', 'outer3', 'outer4', 'water1'],
  middle5: ['inner3', 'middle4', 'middle6', 'outer3', 'outer4', 'water2'],
  middle6: ['inner4', 'middle5', 'middle7', 'water2'],
  middle7: ['inner5', 'middle6', 'middle8', 'outer5', 'outer6', 'water2'],
  middle8: ['inner5', 'middle7', 'middle9', 'outer5', 'outer6', 'water3'],
  middle9: ['inner6', 'middle8', 'middle10', 'water3'],
  middle10: ['inner7', 'middle9', 'middle11', 'outer7', 'outer8', 'water3'],
  middle11: ['inner7', 'middle10', 'middle12', 'outer7', 'outer8', 'water4'],
  middle12: ['inner8', 'middle11', 'middle13', 'water4'],
  middle13: ['inner9', 'middle12', 'middle14', 'outer9', 'outer10', 'water4'],
  middle14: ['inner9', 'middle13', 'middle15', 'outer9', 'outer10', 'water5'],
  middle15: ['inner10', 'middle14', 'middle16', 'water5'],
  middle16: ['inner11', 'middle15', 'middle17', 'outer11', 'outer12', 'water5'],
  middle17: ['inner11', 'middle16', 'middle18', 'outer11', 'outer12', 'water6'],
  middle18: ['inner12', 'middle17', 'middle1', 'water6'],
  outer1: ['middle1', 'middle2', 'base1', 'water6'],
  outer2: ['middle1', 'middle2', 'base1', 'water1'],
  outer3: ['middle4', 'middle5', 'base2', 'water1'],
  outer4: ['middle4', 'middle5', 'base2', 'water2'],
  outer5: ['middle7', 'middle8', 'base3', 'water2'],
  outer6: ['middle7', 'middle8', 'base3', 'water3'],
  outer7: ['middle10', 'middle11', 'base4', 'water3'],
  outer8: ['middle10', 'middle11', 'base4', 'water4'],
  outer9: ['middle13', 'middle14', 'base5', 'water4'],
  outer10: ['middle13', 'middle14', 'base5', 'water5'],
  outer11: ['middle16', 'middle17', 'base6', 'water5'],
  outer12: ['middle16', 'middle17', 'base6', 'water6'],
  base1: ['outer1', 'outer2', 'water1', 'water6'],
  base2: ['outer3', 'outer4', 'water1', 'water2'],
  base3: ['outer5', 'outer6', 'water2', 'water3'],
  base4: ['outer7', 'outer8', 'water3', 'water4'],
  base5: ['outer9', 'outer10', 'water4', 'water5'],
  base6: ['outer11', 'outer12', 'water5', 'water6'],
  water1: ['base1', 'outer2', 'middle2', 'middle3', 'middle4', 'outer3', 'base2'],
  water2: ['base2', 'outer4', 'middle5', 'middle6', 'middle7', 'outer5', 'base3'],
  water3: ['base3', 'outer6', 'middle8', 'middle9', 'middle10', 'outer7', 'base4'],
  water4: ['base4', 'outer8', 'middle11', 'middle12', 'middle13', 'outer9', 'base5'],
  water5: ['base5', 'outer10', 'middle14', 'middle15', 'middle16', 'outer11', 'base6'],
  water6: ['base6', 'outer12', 'middle17', 'middle18', 'middle1', 'outer1', 'base1']
}

for (let node in graph) {
  graph[node].forEach((n) => {
    // TODO avoid drawing every line twice
    drawLine(document.getElementById(node), document.getElementById(n))
  })
}

let map = {}
{
  let player = 1
  for (let node in graph) {
    let element = document.getElementById(node)
    if (node.includes('base')) {
      map[node] = {
        armies: [{
          quantity: 30,
          type: 'Neutral',
          level: 1,
          id: 0
        }],
        player: 'p' + player,
        mines: 0,
        wall: true,
        castle: true,
        deployed: [],
        capital: true,
        justTaken: true
      }
      player += 1
    } else {
      map[node] = {
        armies: [{
          quantity: 10,
          type: 'Neutral',
          level: 1,
          id: 0
        }],
        player: 'neutral',
        mines: 0,
        wall: false,
        castle: false,
        deployed: [],
        capital: false,
        justTaken: false
      }
      if (node.includes('water')) {
        map[node].armies[0].quantity = 1000
      }
      if (node.includes('$')) {
        map[node].armies[0].quantity = 50
      }
    }
  }
}

let fullPlayerNames = {
  neutral: 'Neutral',
  p1: 'Player 1',
  p2: 'Player 2',
  p3: 'Player 3',
  p4: 'Player 4',
  p5: 'Player 5',
  p6: 'Player 6'
}

let uiState = 'selectFocus'
let attackFrom = null

for (let node in graph) {
  let element = document.getElementById(node)
  element.addEventListener('click', (event) => {
    if (uiState === 'selectFocus') {
      switchFocusTo(element)
    }
    if (uiState === 'attack') {
      attackTarget(element, attackFrom)
    }
  })
}

function getFullName(id) {
  let fullName = ""
  if (id === "$") {
    fullName = "Mid"
  } else {
    fullName = id.charAt(0).toUpperCase() + id.slice(1)
    let numbers = [
      fullName.indexOf('0'),
      fullName.indexOf('1'),
      fullName.indexOf('2'),
      fullName.indexOf('3'),
      fullName.indexOf('4'),
      fullName.indexOf('5'),
      fullName.indexOf('6'),
      fullName.indexOf('7'),
      fullName.indexOf('8'),
      fullName.indexOf('9')
    ]
    let number = -1
    // take max of non -1 numbers
    numbers.forEach((n) => {
      if ((n !== -1) && ((n < number) || number === -1)) {
        number = n
      }
    })
    if (number !== -1) {
      fullName = fullName.slice(0, number) + " " + fullName.slice(number)
    }
  }
  return fullName
}

var switchFocusTo = null
{
  function updateInfo(node) {
    let fullName = getFullName(node.id)

    document.getElementById('territory-name').textContent = fullName + " Info"
    document.getElementById('territory-controller').textContent = fullPlayerNames[map[node.id].player]
    document.getElementById('territory-mines').textContent = map[node.id].mines + " Mines"
    if (map[node.id].wall) {
      document.getElementById('territory-wall').textContent = "Wall"
    } else {
      document.getElementById('territory-wall').textContent = "No Wall"
    }
    if (map[node.id].castle) {
      document.getElementById('territory-castle').textContent = "Castle"
    } else {
      document.getElementById('territory-castle').textContent = "No Castle"
    }
    document.getElementById('territory-gold-income').textContent = territoryGoldIncome(node.id)
  }

  function updateArmies(node) {
    let armiesList = document.getElementById('territory-armies-all')
    // clear armies list
    while (armiesList.firstChild) {
      armiesList.removeChild(armiesList.firstChild)
    }

    let selectedList = document.getElementById('territory-armies-selected')
    // clear selected armies list
    while (selectedList.firstChild) {
      selectedList.removeChild(selectedList.firstChild)
    }

    // create button for attack/transfer
    let attackContainer = document.getElementById('armies-attack')
    // delete all old attack buttons
    while (attackContainer.firstChild) {
      attackContainer.removeChild(attackContainer.firstChild)
    }
    let button = document.createElement('button')
    button.textContent = 'Attack/Transfer'
    attackContainer.appendChild(button)

    button.setAttribute('disabled', 'disabled')
    if (map[node.id].player === 'p1') {
      document.getElementById('armies-selected').classList.remove('hidden')
      if (map[node.id].deployed.length > 0) {
        button.removeAttribute('disabled')
      }
    } else {
      document.getElementById('armies-selected').classList.add('hidden')
    }

    let attacksList = document.getElementById('territory-attacks')
    // clear deployed list
    while (attacksList.firstChild) {
      attacksList.removeChild(attacksList.firstChild)
    }

    // setup army deployment UI for this territory
    map[node.id].armies.forEach(listArmy)

    function listArmy(army) {
      let li = document.createElement('li')
      let checkbox = document.createElement('input')
      checkbox.setAttribute('type', 'checkbox')
      let id = army.type + 'ArmyInTerritory' + army.id
      checkbox.setAttribute('id', id)
      let label = document.createElement('label')
      label.setAttribute('for', id)

      let quantity = document.createElement('input')
      quantity.setAttribute('type', 'number')
      quantity.value = army.quantity

      if (map[node.id].player === 'p1') {
        quantity.addEventListener('change', () => {
          // only allow splitting
          if (+quantity.value > army.quantity) {
            console.log('too high', quantity.value, army.quantity)
            quantity.value = army.quantity
            return
          }
          if (+quantity.value < 1) {
            quantity.value = 1
            return
          }
          // split army
          let left = +quantity.value
          let right = +army.quantity - quantity.value

          // find all armies of this type in this territory
          let splitArmies = map[node.id].armies.filter(a => a.type === army.type)
          // find the highest id
          let highestID = splitArmies.reduce((accumulator, current) => {
            console.log(current)
            return Math.max(accumulator, current.id)
          }, 0)
          console.log(splitArmies)
          army.quantity = left
          let splitArmy = {
            quantity: right,
            type: army.type,
            level: army.level,
            id: highestID + 1
          }
          map[node.id].armies.push(splitArmy)
          listArmy(splitArmy)
        })
      } else {
        quantity.setAttribute('disabled', 'disabled')
      }

      let target = map[node.id].deployed.find((d) => {
        return d.army === army && d.target !== null
      })
      let hasTarget = target !== undefined

      let text = null
      if (hasTarget) {
        text = document.createTextNode(army.type + ' ' + army.level + ' to ' +
          getFullName(target.target))
      } else {
        text = document.createTextNode(army.type + ' ' + army.level)
      }

      armiesList.appendChild(li)
      li.appendChild(checkbox)
      li.appendChild(label)
      label.appendChild(quantity)
      label.appendChild(text)

      // put all deployed armies back on the selected section
      if (map[node.id].deployed.some((d) => d.army === army)) {
        selectedList.append(li)
        checkbox.checked = true
        if (hasTarget) {
          // put this attack in the deployed section
          attacksList.append(li)
        }
      }

      // track deployed armies and don't trust the DOM for the values
      checkbox.addEventListener('change', () => {``
        // don't let the player deploy non player armies
        if (map[node.id].player === 'p1') {
          if ((checkbox.checked) && (!hasTarget)) {
            selectedList.append(li)
            map[node.id].deployed.push({
              army: army,
              target: null
            })
          } else {
            armiesList.append(li)
            map[node.id].deployed = map[node.id].deployed.filter(d => d.army !== army)
            hasTarget = false
          }

          // remove target location on now undeployed army
          label.removeChild(text)
          text = document.createTextNode(army.type + ' ' + army.level)
          label.appendChild(text)

          if (map[node.id].deployed.length === 0) {
            button.setAttribute('disabled', 'disabled')
          } else {
            button.removeAttribute('disabled')
          }

          console.log(map[node.id].deployed)
        }
      })
    }

    button.addEventListener('click', () => {
      let neighbours = graph[node.id]
      let nodes = neighbours.map(id => document.getElementById(id))
      // highlight all possible locations to attack/transfer
      nodes.forEach((n) => {
        n.classList.add('highlight')
      })
      uiState = 'attack'
      // mutate the global variable to let the recieving
      // event know the originating node
      attackFrom = node
    })
  }

  switchFocusTo = function(node) {
    updateInfo(node)
    updateArmies(node)
  }
}

function attackTarget(to, from) {
  if (from) {
    if (graph[from.id].includes(to.id)) {
      // mark all semi deployed armies with the target
      map[from.id].deployed.forEach((d) => {
        if (d.target === null) {
          d.target = to.id
        }
      })
    }
  }
  uiState = 'selectFocus'
  stopHighlighting()
  // stay focused on the current node as the player
  // may want to deploy additional units
  // let this refresh the UI to show the new attacks
  switchFocusTo(from)
}

function stopHighlighting() {
  for (let node in map) {
    let element = document.getElementById(node)
    // reset highlighting on changing node focus
    element.classList.remove('highlight')
  }
}

let players = {};
['p1', 'p2', 'p3', 'p4', 'p5', 'p6'].forEach((p) => {
  players[p] = {
    upgrades: {
      archers: 1,
      calvary: 1,
      infantry: 1
    },
    gold: 0
  }
})

// mine income rates and upgrade costs
// index by level of mine 0-6
let mineIncome = [ 0, 100, 150, 190, 230, 250, 500 ]
// index by level of mine to buy 1-6
let mineUpgradeCost = [ 200, 300, 450, 600, 750, 1200 ]

function territoryGoldIncome(node) {
  // passive income for territory
  let income = 150
  if (node.includes('water')) {
    income = 0
  }
  if (map[node].capital) {
    income = 400
  }
  if (node.includes('$')) {
    if (map[node].justTaken) {
      income = 2000
    } else {
      income = 600
    }
  }
  // gain extra gold for mine levels
  return income += mineIncome[map[node].mines]
}

function applyPlayerGoldIncome() {
  for (let node in map) {
    players[map[node].player] += territoryGoldIncome(node)
  }
}

function getShortTerritoryUnits(army) {
  if (army.type === 'Neutral') {
    return army.quantity
  } else {
    return army.quantity + ' ' + army.type.charAt(0).toUpperCase()
  }
}

function updateMap() {
  let walls = document.getElementById('walls')
  // remove all walls
  while (walls.firstChild) {
    walls.removeChild(walls.firstChild)
  }

  let mines = document.getElementById('mines')
  // remove all mines
  while (mines.firstChild) {
    mines.removeChild(mines.firstChild)
  }

  let castles = document.getElementById('castles')
  // remove all castles
  while (castles.firstChild) {
    castles.removeChild(castles.firstChild)
  }

  for (let node in map) {
    let element = document.getElementById(node);
    // update colors for each node
    ['p1', 'p2', 'p3', 'p4', 'p5', 'p6'].forEach((p) => {
      element.classList.remove(p)
      if (map[node].player === p) {
        element.classList.add(p)
      }
    })
    // update unit counts
    let units = Array.from(element.childNodes).find(
      n => n.classList && n.classList.contains('units'))

    while (units.firstChild) {
      units.removeChild(units.firstChild)
    }

    map[node].armies.forEach((army) => {
      let p = document.createElement('p')
      p.textContent = getShortTerritoryUnits(army)
      units.appendChild(p)
    })

    if (map[node].wall) {
      drawWall(element)
    }

    if (map[node].mines > 0) {
      console.log('drawing mine')
      drawMine(element, map[node].mines)
    }

    if (map[node].castle) {
      drawCastle(element)
    }
  }
}

updateMap()
applyPlayerGoldIncome()

console.log("done")
</script>
